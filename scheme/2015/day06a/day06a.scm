(module day06a
  (main main))

(define (main args)
  (let* ((argc (length args))
         (progname (car args)))
    (if (< argc 2)
      (usage progname))
      (let* ((filename (cadr args))
             (result (process filename)))
        (printf "result = ~a\n" (number->string result)))))

(define (usage progname)
  (fprintf (current-error-port) "usage: ~a <input file>\n" progname)
  (exit 1))

(define (parse-coords coord-str)
  (let* ((nums (string-split coord-str ","))
         (r (string->number (list-ref nums 0)))
         (c (string->number (list-ref nums 1))))
    (list r c)))

(define (perform! grid action upper-left lower-right)
  (do ((row (car upper-left) (+ row 1))) ((> row (car lower-right)))
    (do ((col (cadr upper-left) (+ col 1))) ((> col (cadr lower-right)))
      (let ((idx (+ (* row 1000) col)))
        (cond ((string=? action "turn on") (vector-set! grid idx #t))
              ((string=? action "turn off") (vector-set! grid idx #f))
              ((string=? action "toggle") (vector-set! grid idx (not (vector-ref grid idx)))))))))

(define (count grid)
  (define (count-rec grid idx count)
    (if (>= idx (* 1000 1000))
      count
      (if (vector-ref grid idx)
        (count-rec grid (+ 1 idx) (+ 1 count))
        (count-rec grid (+ 1 idx) count))))
  (count-rec grid 0 0))

(define (process filename)
  (let* ((input-file (open-input-file filename))
         (lines (read-lines input-file))
         (grid (make-vector (* 1000 1000) #f)))
    (close-input-port input-file)
    (for-each
      (lambda (line)
        (let ((words (string-split line)))
          (cond
            ((string=? (list-ref words 0) "turn")
             (let* ((action (string-append (list-ref words 0) " " (list-ref words 1)))
                    (upper-left (parse-coords (list-ref words 2)))
                    (lower-right (parse-coords (list-ref words 4))))
               (perform! grid action upper-left lower-right)))
            ((string=? (list-ref words 0) "toggle")
             (let* ((action (list-ref words 0))
                    (upper-left (parse-coords (list-ref words 1)))
                    (lower-right (parse-coords (list-ref words 3))))
               (perform! grid action upper-left lower-right))))))
      lines)
    (count grid)))
