(module day07b
  (main main))

(define (main args)
  (let* ((argc (length args))
         (progname (car args)))
    (if (< argc 2)
      (usage progname))
      (let* ((filename (cadr args))
             (result (process filename)))
        (printf "result = ~a\n" (number->string result)))))

(define (usage progname)
  (fprintf (current-error-port) "usage: ~a <input file>\n" progname)
  (exit 1))

(define (parse-line line)
  (let ((tokens (string-split line)))
    (cond ((string=? (list-ref tokens 0) "NOT")
	   (let ((src (list-ref tokens 1))
		 (dest (list-ref tokens 3)))
	     (cons dest (list 'not src))))
	  ((string=? (list-ref tokens 1) "AND")
	   (let ((src1 (list-ref tokens 0))
		 (src2 (list-ref tokens 2))
		 (dest (list-ref tokens 4)))
	     (cons dest (list 'and src1 src2))))
	  ((string=? (list-ref tokens 1) "OR")
	   (let ((src1 (list-ref tokens 0))
		 (src2 (list-ref tokens 2))
		 (dest (list-ref tokens 4)))
	     (cons dest (list 'or src1 src2))))
	  ((string=? (list-ref tokens 1) "LSHIFT")
	   (let ((src (list-ref tokens 0))
		 (amt (string->integer (list-ref tokens 2)))
		 (dest (list-ref tokens 4)))
	     (cons dest (list 'left-shift src amt))))
	  ((string=? (list-ref tokens 1) "RSHIFT")
	   (let ((src (list-ref tokens 0))
		 (amt (string->integer (list-ref tokens 2)))
		 (dest (list-ref tokens 4)))
	     (cons dest (list 'right-shift src amt))))
	  ((string=? (list-ref tokens 1) "->")
	   (let ((src (list-ref tokens 0))
		 (dest (list-ref tokens 2)))
	     (cons dest (list 'assign src)))))))

(define (evaluate ops cache expr)
  (if (every char-numeric? (string->list expr))
    (string->number expr)
    (if (hashtable-contains? cache expr)
      (hashtable-get cache expr)
      (let* ((operation (hashtable-get ops expr))
	     (operator (car operation))
	     (r (cond ((equal? operator 'assign)
		       (let ((src (cadr operation)))
			 (evaluate ops cache src)))
		      ((equal? operator 'not)
		       (let* ((src (cadr operation))
			      (a (evaluate ops cache src)))
			 (bit-not a)))
		      ((equal? operator 'and)
		       (let* ((src1 (cadr operation))
			      (src2 (caddr operation))
			      (a (evaluate ops cache src1))
			      (b (evaluate ops cache src2)))
			 (bit-and a b)))
		      ((equal? operator 'or)
		       (let* ((src1 (cadr operation))
			      (src2 (caddr operation))
			      (a (evaluate ops cache src1))
			      (b (evaluate ops cache src2)))
			 (bit-or a b)))
		      ((equal? operator 'left-shift)
		       (let* ((src (cadr operation))
			      (amt (caddr operation))
			      (a (evaluate ops cache src)))
			 (bit-lsh a amt)))
		      ((equal? operator 'right-shift)
		       (let* ((src (cadr operation))
			      (amt (caddr operation))
			      (a (evaluate ops cache src)))
			 (bit-rsh a amt)))))
	     (masked (bit-and r 65535)))
	(hashtable-put! cache expr masked)
	masked))))

(define (process filename)
  (let* ((input-file (open-input-file filename))
         (lines (read-lines input-file))
	 (operations (make-hashtable)))
    (close-input-port input-file)
    (for-each
      (lambda (line)
	(let* ((parsed (parse-line line))
	       (dest (car parsed))
	       (operation (cdr parsed)))
	  (hashtable-put! operations dest operation)))
      lines)
    (let* ((a (evaluate operations (make-hashtable)  "a")))
      (hashtable-put! operations "b" (list 'assign (number->string a)))
      (evaluate operations (make-hashtable) "a"))))

