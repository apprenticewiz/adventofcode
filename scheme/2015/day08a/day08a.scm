(module day08a
  (main main))

(define (main args)
  (let* ((argc (length args))
         (progname (car args)))
    (if (< argc 2)
      (usage progname))
      (let* ((filename (cadr args))
             (result (process filename)))
        (printf "result = ~a\n" (number->string result)))))

(define (usage progname)
  (fprintf (current-error-port) "usage: ~a <input file>\n" progname)
  (exit 1))

(define (scan-chars chars i)
  (cond ((null? chars) i)
        ((= (length chars) 1) (+ i 1))
        (#t (let ((ch1 (car chars))
                  (ch2 (cadr chars)))
              (cond ((and (char=? ch1 #\\) (char=? ch2 #\\)) (scan-chars (cddr chars) (+ i 1)))
                    ((and (char=? ch1 #\\) (char=? ch2 #\")) (scan-chars (cddr chars) (+ i 1)))
                    ((and (char=? ch1 #\\) (char=? ch2 #\x)) (scan-chars (cddddr chars) (+ i 1)))
                    (#t (scan-chars (cdr chars) (+ i 1))))))))

(define (process filename)
  (let* ((input-file (open-input-file filename))
         (lines (read-lines input-file)))
    (close-input-port input-file)
    (define result 0)
    (for-each
      (lambda (line)
        (let* ((code-len (string-length line))
               (quoted (substring line 1 (- (string-length line) 1)))
               (mem-len (scan-chars (string->list quoted) 0)))
          (set! result (+ result (- code-len mem-len)))))
      lines)
    result))
